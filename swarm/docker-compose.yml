version: '3.8'

services:
  adservice:
    container_name: adservice
    environment:
    - PORT=9555
    image: gcr.io/google-samples/microservices-demo/adservice:v0.10.1
    ports:
    - '9555'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  cartservice:
    container_name: cartservice
    environment:
    - REDIS_ADDR=redis-cart:6379
    image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.1
    ports:
    - '7070'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  frontend:
    container_name: frontend
    environment:
    - PORT=8080
    - PRODUCT_CATALOG_SERVICE_ADDR=productcatalogservice:3550
    - CURRENCY_SERVICE_ADDR=currencyservice:7000
    - CART_SERVICE_ADDR=cartservice:7070
    - RECOMMENDATION_SERVICE_ADDR=recommendationservice:8080
    - SHIPPING_SERVICE_ADDR=shippingservice:50051
    - CHECKOUT_SERVICE_ADDR=checkoutservice:5050
    - AD_SERVICE_ADDR=adservice:9555
    - SHOPPING_ASSISTANT_SERVICE_ADDR=shoppingassistantservice:80
    - ENABLE_PROFILER=0
    image: gcr.io/google-samples/microservices-demo/frontend:v0.10.1
    ports:
    - '8080'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  shippingservice:
    container_name: shippingservice
    environment:
    - PORT=50051
    - DISABLE_PROFILER=1
    image: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.1
    ports:
    - '50051'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  paymentservice:
    container_name: paymentservice
    environment:
    - PORT=50051
    - DISABLE_PROFILER=1
    image: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.1
    ports:
    - '50051'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  recommendationservice:
    container_name: recommendationservice
    environment:
    - PORT=8080
    - PRODUCT_CATALOG_SERVICE_ADDR=productcatalogservice:3550
    - DISABLE_PROFILER=1
    image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.10.1
    ports:
    - '8080'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  redis-cart:
    container_name: redis
    image: redis:alpine
    ports:
    - '6379'
    volumes:
      - data:/data-redis
        # command: redis-server --appendonly yes
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  productcatalogservice:
    container_name: productcatalogservice
    environment:
    - PORT=3550
    - DISABLE_PROFILER=1
    image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.10.1
    ports:
    - '3550'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  currencyservice:
    container_name: currencyservice
    environment:
    - PORT=7000
    - DISABLE_PROFILER=1
    image: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.1
    ports:
    - '7000'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  checkoutservice:
    container_name: checkoutservice
    environment:
    - PORT=5050
    - PRODUCT_CATALOG_SERVICE_ADDR=productcatalogservice:3550
    - SHIPPING_SERVICE_ADDR=shippingservice:50051
    - PAYMENT_SERVICE_ADDR=paymentservice:50051
    - EMAIL_SERVICE_ADDR=emailservice:5000
    - CURRENCY_SERVICE_ADDR=currencyservice:7000
    - CART_SERVICE_ADDR=cartservice:7070
    image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.1
    ports:
    - '5050'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  emailservice:
    container_name: emailservice
    environment:
    - PORT=8080
    - DISABLE_PROFILER=1
    image: gcr.io/google-samples/microservices-demo/emailservice:v0.10.1
    ports:
    - '8080'
    networks:
    - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./efs-docker/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - web
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    hostname: '{{.Node.ID}}'
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - '8081:8080'  # Port untuk akses cAdvisor
    networks:
      - web

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.mount-points-exclude
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - '9100:9100'  # Port untuk akses Node Exporter
    networks:
      - web

volumes:
  data:

networks:
  web:
    driver: overlay